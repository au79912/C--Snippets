{
	for with itteration var{
		prefix for i,
		body int n=$1;nnfor(int i=0; in; i++)n{n    $2n}
	},

	layout for C++ file{
		prefix layout,
		body [
			#include iostream,
			,
			using namespace std;,
			,
			int main(int argc, char const argv[]),
			{,
			t$1,
			treturn 0;,
			}
		]
	},

	Node code for C++ file{
		prefix node,
		body [
			template class T,
			class node,
			{,
			tpublic,
			ttnode next;,
			ttnode prev;,
			ttT data;,
			tt$1,
			};
		]
	},

	linked list implementation{
		prefix linkedlist,
		body [
			template class T,
			class linkedlist,
			{,
			tpublic,
			ttnodeT head;,
			ttnodeT tail;,
			ttnodeT temp;,
			,
			ttlinkedlist(),
			tt{,
			ttthead=NULL;,
			ttttail=NULL;,
			ttttemp=NULL;,
			tt},
			tt$1,
			};
		]
	},

	Stack class for Cpp {
		prefix stack_class,
		body [
		  class stack,
		  {,
		  tprivate,
		  ttstruct node,
		  tt{,
		  tttint data;,
		  tttnode next;,
		  ,
		  tttnode(int d),
		  ttt{,
		  ttttdata=d;,
		  ttttnext=NULL;,
		  ttt},
		  ,
		  tttnode(),
		  ttt{,
		  ttttdata=0;,
		  ttttnext=NULL;,
		  ttt},
		  tt};,
		  ttnode top;,
		  ,
		  tpublic,
		  ttstack(),
		  tt{,
		  ttttop=NULL;,
		  tt},
		  ,
		  ttvoid push(int d),
		  tt{,
		  tttnode temp= new node(d);,
		  ttttemp-next=top;,
		  ttttop=temp;,
		  tt},
		  ,
		  ttvoid pop(),
		  tt{,
		  tttint data;,
		  tttif (top==NULL),
		  ttt{,
		  ttttcoutStack is empty;,
		  ttttreturn;,
		  ttt},
		  tttnode temp = top;,
		  tttdata=temp-data;,
		  ttttop=top-next;,
		  tttdelete temp;,
		  tttcoutpopped element is  dataendl;,
		  tttreturn;,
		  tt},
		  ,
		  ttbool isEmpty(),
		  tt{,
		  tttreturn top==NULL;,
		  tt},
		  ,
		  ttint peak(),
		  tt{,
		  tttif(top == NULL),
		  ttt{,
		  ttttcoutstack is empty;,
		  ttttreturn 0;,
		  ttt},
		  tttreturn top-data;,
		  tt},
		  ,
		  ttvoid display(),
		  tt{,
		  tttnode temp = top;,
		  tttif(temp ==NULL),
		  ttt{,
		  ttttcout  stack is empty;,
		  ttt},
		  tttwhile(temp != NULL),
		  ttt{,
		  ttttcouttemp-data ;,
		  tttttemp = temp-next;,
		  ttt},
		  tt},
		  };
		],
		description implementation of stack class
	},

	Queue class with node {
		prefix queue_class,
		body [
		  class node,
		  {,
		  tpublic,
		  ttint data;,
		  ttnode next;,
		  ttnode prev;,
		  ,
		  ttnode(),
		  tt{,
		  tttdata = 0;,
		  tttnext = NULL;,
		  tttprev = NULL;,
		  tt},
		  ,
		  ttnode(int d),
		  tt{,
		  tttdata = d;,
		  tttnext = NULL;,
		  tttprev = NULL;,
		  tt},
		  };,
		  ,
		  class queue,
		  {,
		  tprivate,
		  ttnode front;,
		  ttnode rear;,
		  ,
		  tpublic,
		  ttqueue(),
		  tt{,
		  tttfront = NULL;,
		  tttrear = NULL;,
		  tt},
		  ,
		  ttvoid enqueue(int data),
		  tt{,
		  tttnode newnode = new node(data);,
		  ,
		  tttif (front == NULL),
		  ttt{,
		  ttttfront = newnode;,
		  ttttrear = newnode;,
		  ttttreturn;,
		  ttt},
		  ,
		  tttrear-next = newnode;,
		  tttnewnode-prev = rear;,
		  tttrear = newnode;,
		  tt},
		  ,
		  ttvoid dequeue(),
		  tt{,
		  tttif (front == NULL),
		  ttt{,
		  ttttcout  Queue is empty  endl;,
		  ttttreturn;,
		  ttt},
		  ,
		  tttnode temp = front;,
		  tttfront = front-next;,
		  tttdelete temp;,
		  tt},
		  ,
		  ttvoid display(),
		  tt{,
		  tttif (front == NULL),
		  ttt{,
		  ttttcout  Queue is empty  endl;,
		  ttttreturn;,
		  ttt},
		  ,
		  tttnode temp = front;,
		  ,
		  tttwhile (temp != NULL),
		  ttt{,
		  ttttcout  temp-data   ;,
		  tttttemp = temp-next;,
		  ttt},
		  tttcout  endl;,
		  tt},
		  };,
		  
		],
		description Queue class with node
	  },

	  BST class with node {
		prefix BST_class,
		body [
		  ,
		  class node,
		  {,
		  public,
		  tnode left;,
		  tnode right;,
		  tint data;,
		  ,
		  tnode(),
		  t{,
		  ttleft = NULL;,
		  ttright = NULL;,
		  ttdata = 0;,
		  t},
		  ,
		  tnode(int data),
		  t{,
		  ttleft = NULL;,
		  ttright = NULL;,
		  ttthis-data = data;,
		  t},
		  };,
		  ,
		  class BST,
		  {,
		  tpublic,
		  ttnode root;,
		  ttnode temp;,
		  ,
		  ttBST(),
		  tt{,
		  tttroot = NULL;,
		  tt},
		  ,
		  ttvoid insert(int data),
		  tt{,
		  tttnode newnode = new node(data);,
		  ,
		  tttif(root == NULL),
		  ttt{,
		  ttttroot = newnode;,
		  ttttreturn;,
		  ttt},
		  ,
		  ttttemp = root;,
		  ,
		  tttwhile(temp!=NULL),
		  ttt{,
		  ttttif(data  temp-data),
		  tttt{,
		  tttttif (temp-right == NULL),
		  ttttt{,
		  tttttttemp-right = newnode;,
		  ttttttreturn;,
		  ttttt},
		  tttttelse,
		  ttttt{,
		  tttttttemp = temp-right;,
		  ttttt},
		  tttt},
		  ,
		  ttttelse if(data temp-data),
		  tttt{,
		  tttttif(temp-left==NULL),
		  ttttt{,
		  tttttttemp-left = newnode;,
		  ttttttreturn;,
		  ttttt},
		  tttttelse,
		  ttttt{,
		  tttttttemp=temp-left;,
		  ttttt},
		  tttt},
		  ,
		  ttttelse,
		  tttt{,
		  tttttcoutDuplicate dataendl;,
		  tttttreturn;,
		  tttt},
		  ttt},
		  tt},
		  ,
		  ttnode minValueNode(node root),
		  tt{,
		  tttnode temp = root;,
		  ,
		  tttwhile(temp-left!=NULL),
		  ttt{,
		  tttttemp = temp-left;,
		  ttt},
		  ,
		  tttreturn temp;,
		  tt},
		  ,
		  ttnode maxValueNode(node root),
		  tt{,
		  tttnode temp = root;,
		  ,
		  tttwhile(temp-right!=NULL),
		  ttt{,
		  tttttemp = temp-right;,
		  ttt},
		  ,
		  tttreturn temp;,
		  tt},
		  ,
		  ttvoid deleteNode(int data),
		  tt{,
		  tttnode temp = root;,
		  tttnode parent = root;,
		  ,
		  tttwhile(temp-data!=data),
		  ttt{,
		  ttttparent = temp;,
		  ,
		  ttttif(data  temp-data),
		  tttt{,
		  ttttttemp = temp-right;,
		  tttt},
		  ttttelse,
		  tttt{,
		  ttttttemp = temp-left;,
		  tttt},
		  ttt},
		  ,
		  tttif(temp-left==NULL && temp-right==NULL),
		  ttt{,
		  ttttif(temp==root),
		  tttt{,
		  tttttroot = NULL;,
		  tttt},
		  ttttelse if(parent-left==temp),
		  tttt{,
		  tttttparent-left = NULL;,
		  tttt},
		  ttttelse,
		  tttt{,
		  tttttparent-right = NULL;,
		  tttt},
		  ttt},
		  ,
		  tttelse if(temp-left==NULL),
		  ttt{,
		  ttttif(temp==root),
		  tttt{,
		  tttttroot = temp-right;,
		  tttt},
		  ttttelse if(parent-left==temp),
		  tttt{,
		  tttttparent-left = temp-right;,
		  tttt},
		  ttttelse,
		  tttt{,
		  tttttparent-right = temp-right;,
		  tttt},
		  ttt},
		  ,
		  tttelse if(temp-right==NULL),
		  ttt{,
		  ttttif(temp==root),
		  tttt{,
		  tttttroot = temp-left;,
		  tttt},
		  ttttelse if(parent-left==temp),
		  tttt{,
		  tttttparent-left = temp-left;,
		  tttt},
		  ttttelse,
		  tttt{,
		  tttttparent-right = temp-left;,
		  tttt},
		  ttt},
		  ttt,
		  tttelse,
		  ttt{,
		  ttttnode successor = minValueNode(temp-right);,
		  tttttemp-data = successor-data;,
		  ttttdeleteNode(successor-data);,
		  ttt},
		  tt},
		  ,
		  ttvoid inorder(node printer),
		  tt{,
		  tttif(printer!=NULL),
		  ttt{,
		  ttttinorder(printer-left);,
		  ttttcoutprinter-data ;,
		  ttttinorder(printer-right);,
		  ttt},
		  tt},
		  };
		],
		description BST class with node
	  },

	  seperate chain hash with node {
		prefix Hash_chain,
		body [
		  class node,
		  {,
		  tpublic,
		  tint key;,
		  tint data;,
		  tnode next;,
		  ,
		  tnode(),
		  t{,
		  ttkey = 0;,
		  ttnext = NULL;,
		  t},
		  ,
		  tnode(int key, int data),
		  t{,
		  ttthis-key = key;,
		  ttthis-data= data;,
		  ttnext = NULL;,
		  t},
		  };,
		  ,
		  class Hash,
		  {,
		  tnode table[table_size]; make global const in table_size = number,
		  ,
		  tpublic,
		  ttHash(),
		  tt{,
		  tttfor(int i=0;itable_size;i++),
		  ttt{,
		  tttttable[i]=NULL;,
		  ttt},
		  tt},
		  ,
		  ttint divisionHash(int data),
		  tt{,
		  tttreturn data % table_size;,
		  tt},
		  ,
		  ttvoid insert(int key, int data),
		  tt{,
		  tttnode newnode = new node(key, data);,
		  tttint index = divisionHash(key);,
		  ,
		  tttif(table[index]==NULL),
		  ttt{,
		  tttttable[index]=newnode;,
		  ttttreturn;,
		  ttt},
		  ,
		  tttnode temp= table[index];,
		  tttwhile(temp-next != NULL),
		  ttt{,
		  tttttemp = temp-next;,
		  ttt},
		  ttttemp-next =newnode ;,
		  tt},
		  ,
		  ttvoid search(int key),
		  tt{,
		  tttint index = divisionHash(key);,
		  tttnode temp= table[index];,
		  ,
		  tttwhile(temp!=NULL),
		  ttt{,
		  ttttif(temp-key==key),
		  tttt{,
		  tttttcoutnData found at index index is temp-data;,
		  tttttreturn;,
		  tttt},
		  tttttemp = temp-next;,
		  ttt},
		  ,
		  tttcoutnData not found;,
		  tt},
		  ,
		  ttvoid remove(int key),
		  tt{,
		  tttint index = divisionHash(key);,
		  ,
		  tttnode temp= table[index];,
		  tttnode prev=NULL;,
		  ,
		  tttwhile(temp!=NULL),
		  ttt{,
		  ttttif(temp-key==key),
		  tttt{,
		  tttttif(prev==NULL),
		  ttttt{,
		  tttttttable[index]=temp-next;,
		  ttttt},
		  tttttelse,
		  ttttt{,
		  ttttttprev-next=temp-next;,
		  ttttt},
		  tttttcoutnData deleted;,
		  tttttreturn;,
		  tttt},
		  ttttprev=temp;,
		  tttttemp=temp-next;,
		  ttt},
		  tttcoutnData not found;,
		  tt},
		  ,
		  ttbool is_empty(),
		  tt{,
		  tttfor(int i=0;itable_size;i++),
		  ttt{,
		  ttttif(table[i]!=NULL),
		  tttt{,
		  tttttreturn false;,
		  tttt},
		  ttt},
		  tttreturn true;,
		  tt},
		  ,
		  ttvoid display(),
		  tt{,
		  tttfor(int i=0;itable_size;i++),
		  ttt{,
		  ttttnode temp=table[i];,
		  ttttwhile(temp!=NULL),
		  tttt{,
		  tttttcoutntemp-key temp-data;,
		  ttttttemp=temp-next;,
		  tttt},
		  ttt},
		  tt},
		  };,
		  
		],
		description seperate chain hash with node
	  },

	  adjuncey List with common functions {
		prefix A_list,
		body [
		  ,
		  class node,
		  {,
		  public,
		  tint data;,
		  tnode next;,
		  ,
		  tnode(),
		  t{,
		  ttdata = 0;,
		  ttnext = NULL;,
		  t},
		  ,
		  tnode(int data),
		  t{,
		  ttthis-data = data;,
		  ttnext = NULL;,
		  t},
		  };,
		  ,
		  class graph,
		  {,
		  public,
		  tnode head;,
		  tnode temp;,
		  ,
		  tgraph(),
		  t{,
		  tthead = NULL;,
		  t},
		  ,
		  tvoid insert(int data),
		  t{,
		  ttnode newnode = new node(data);,
		  ,
		  ttif (head == NULL),
		  tt{,
		  ttthead = newnode;,
		  tttreturn;,
		  tt},
		  ,
		  tttemp = head;,
		  ,
		  ttwhile (temp-next != NULL),
		  tt{,
		  ttttemp = temp-next;,
		  tt},
		  tttemp-next = newnode;,
		  t},
		  ,
		  tvoid display(),
		  t{,
		  tttemp = head;,
		  ,
		  ttwhile (temp != NULL),
		  tt{,
		  tttcout  temp-data   ;,
		  ttttemp = temp-next;,
		  tt},
		  t},
		  ,
		  tvoid sort(),
		  t{,
		  ttnode prev = NULL;,
		  ttnode curr = head;,
		  ttnode next = NULL;,
		  ,
		  ttwhile (curr != NULL),
		  tt{,
		  tttnext = curr-next;,
		  ,
		  tttif (prev == NULL),
		  ttt{,
		  ttttprev = curr;,
		  ttttcurr = next;,
		  ttttcontinue;,
		  ttt},
		  ,
		  tttif (curr-data  prev-data),
		  ttt{,
		  ttttif (prev == head),
		  tttt{,
		  ttttthead = curr;,
		  tttt},
		  ttttelse,
		  tttt{,
		  tttttprev-next = curr-next;,
		  tttt},
		  ,
		  ttttcurr-next = head;,
		  tttthead = curr;,
		  ttt},
		  tttelse,
		  ttt{,
		  ttttprev = curr;,
		  ttt},
		  ,
		  tttcurr = next;,
		  tt},
		  t},
		  };,
		  ,
		  void sort_arr(graph arr[]),
		  {,
		  tfor (int i = 0; i  5; i++),
		  t{,
		  ttarr[i].sort();,
		  t},
		  },
		  ,
		  void add_edge(int a, int b, graph arr[]),
		  {,
		  tarr[a].insert(b);,
		  tarr[b].insert(a);,
		  },
		  ,
		  void display_list(graph arr[]),
		  {,
		  tfor (int i = 0; i  5; i++),
		  t{,
		  ttcouti  ;,
		  ttarr[i].display();,
		  ttcout  endl;,
		  t},
		  },
		  ,
		  void BFS(int a, graph arr[]),
		  {,
		  tbool vis[5]={false};,
		  tqueueint q;,
		  ,
		  tq.push(a);,
		  tvis[a]=true;,
		  ,
		  twhile(!q.empty()),
		  t{,
		  ttint f = q.front();,
		  ttq.pop();,
		  ttcoutf ;,
		  ,
		  ttnode temp = new node();,
		  tttemp = arr[f].head;,
		  ,
		  ttwhile(temp !=NULL),
		  tt{,
		  tttif (vis[temp-data]==false),
		  ttt{,
		  ttttvis[temp-data]=true;,
		  ttttq.push(temp-data);,
		  ttt},
		  ttttemp = temp-next;,
		  tt},
		  t},
		  }
		],
		description adjuncey List with common functions
	}

}